"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = define;

var _property = _interopRequireDefault(require("./property"));

var _render = _interopRequireDefault(require("./render"));

var cache = _interopRequireWildcard(require("./cache"));

var _utils = require("./utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* istanbul ignore next */
try {
  process.env.NODE_ENV;
} catch (e) {
  var process = {
    env: {
      NODE_ENV: 'production'
    }
  };
} // eslint-disable-line


var defaultMethod = function defaultMethod(host, value) {
  return value;
};

function compile(Hybrid, descriptors) {
  Hybrid.hybrids = descriptors;
  Hybrid.callbacks = [];
  Object.keys(descriptors).forEach(function (key) {
    var desc = descriptors[key];

    var type = _typeof(desc);

    var config;

    if (type === 'function') {
      config = key === 'render' ? (0, _render.default)(desc) : {
        get: desc
      };
    } else if (type !== 'object' || desc === null || Array.isArray(desc)) {
      config = (0, _property.default)(desc);
    } else {
      config = {
        get: desc.get || defaultMethod,
        set: desc.set || !desc.get && defaultMethod || undefined,
        connect: desc.connect,
        observe: desc.observe
      };
    }

    Object.defineProperty(Hybrid.prototype, key, {
      get: function get() {
        return cache.get(this, key, config.get);
      },
      set: config.set && function set(newValue) {
        cache.set(this, key, config.set, newValue);
      },
      enumerable: true,
      configurable: process.env.NODE_ENV !== 'production'
    });

    if (config.connect) {
      Hybrid.callbacks.push(function (host) {
        return config.connect(host, key, function () {
          cache.invalidate(host, key);
        });
      });
    }

    if (config.observe) {
      Hybrid.callbacks.push(function (host) {
        var lastValue;
        return cache.observe(host, key, function () {
          var value = host[key];

          if (value !== lastValue) {
            config.observe(host, value, lastValue);
            lastValue = value;
          }
        });
      });
    }
  });
}

var update;
/* istanbul ignore else */

if (process.env.NODE_ENV !== 'production') {
  var walkInShadow = function walkInShadow(node, fn) {
    fn(node);
    Array.from(node.children).forEach(function (el) {
      return walkInShadow(el, fn);
    });

    if (node.shadowRoot) {
      Array.from(node.shadowRoot.children).forEach(function (el) {
        return walkInShadow(el, fn);
      });
    }
  };

  var updateQueue = new Map();

  update = function update(Hybrid, lastHybrids) {
    if (!updateQueue.size) {
      _utils.deferred.then(function () {
        walkInShadow(document.body, function (node) {
          if (updateQueue.has(node.constructor)) {
            var hybrids = updateQueue.get(node.constructor);
            node.disconnectedCallback();
            Object.keys(node.constructor.hybrids).forEach(function (key) {
              cache.invalidate(node, key, node[key] === hybrids[key]);
            });
            node.connectedCallback();
          }
        });
        updateQueue.clear();
      });
    }

    updateQueue.set(Hybrid, lastHybrids);
  };
}

var disconnects = new WeakMap();

function defineElement(tagName, hybridsOrConstructor) {
  var type = _typeof(hybridsOrConstructor);

  if (type !== 'object' && type !== 'function') {
    throw TypeError("Second argument must be an object or a function: ".concat(type));
  }

  var CustomElement = window.customElements.get(tagName);

  if (type === 'function') {
    if (CustomElement !== hybridsOrConstructor) {
      return window.customElements.define(tagName, hybridsOrConstructor);
    }

    return CustomElement;
  }

  if (CustomElement) {
    if (CustomElement.hybrids === hybridsOrConstructor) {
      return CustomElement;
    }

    if (process.env.NODE_ENV !== 'production' && CustomElement.hybrids) {
      Object.keys(CustomElement.hybrids).forEach(function (key) {
        delete CustomElement.prototype[key];
      });
      var lastHybrids = CustomElement.hybrids;
      compile(CustomElement, hybridsOrConstructor);
      update(CustomElement, lastHybrids);
      return CustomElement;
    }

    throw Error("Element '".concat(tagName, "' already defined"));
  }

  var Hybrid =
  /*#__PURE__*/
  function (_HTMLElement) {
    _inherits(Hybrid, _HTMLElement);

    function Hybrid() {
      _classCallCheck(this, Hybrid);

      return _possibleConstructorReturn(this, _getPrototypeOf(Hybrid).apply(this, arguments));
    }

    _createClass(Hybrid, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        var callbacks = this.constructor.callbacks;
        var list = [];

        for (var index = 0; index < callbacks.length; index += 1) {
          var cb = callbacks[index](this);
          if (cb) list.push(cb);
        }

        disconnects.set(this, list);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var list = disconnects.get(this);

        for (var index = 0; index < list.length; index += 1) {
          list[index]();
        }
      }
    }], [{
      key: "name",
      get: function get() {
        return tagName;
      }
    }]);

    return Hybrid;
  }(_wrapNativeSuper(HTMLElement));

  compile(Hybrid, hybridsOrConstructor);
  customElements.define(tagName, Hybrid);
  return Hybrid;
}

function defineMap(elements) {
  return Object.keys(elements).reduce(function (acc, key) {
    var tagName = (0, _utils.pascalToDash)(key);
    acc[key] = defineElement(tagName, elements[key]);
    return acc;
  }, {});
}

function define() {
  if (_typeof(arguments.length <= 0 ? undefined : arguments[0]) === 'object') {
    return defineMap(arguments.length <= 0 ? undefined : arguments[0]);
  }

  return defineElement.apply(void 0, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZpbmUuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZSIsImRlZmF1bHRNZXRob2QiLCJob3N0IiwidmFsdWUiLCJjb21waWxlIiwiSHlicmlkIiwiZGVzY3JpcHRvcnMiLCJoeWJyaWRzIiwiY2FsbGJhY2tzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJkZXNjIiwidHlwZSIsImNvbmZpZyIsImdldCIsIkFycmF5IiwiaXNBcnJheSIsInNldCIsInVuZGVmaW5lZCIsImNvbm5lY3QiLCJvYnNlcnZlIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJjYWNoZSIsIm5ld1ZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsInB1c2giLCJpbnZhbGlkYXRlIiwibGFzdFZhbHVlIiwidXBkYXRlIiwid2Fsa0luU2hhZG93Iiwibm9kZSIsImZuIiwiZnJvbSIsImNoaWxkcmVuIiwiZWwiLCJzaGFkb3dSb290IiwidXBkYXRlUXVldWUiLCJNYXAiLCJsYXN0SHlicmlkcyIsInNpemUiLCJkZWZlcnJlZCIsInRoZW4iLCJkb2N1bWVudCIsImJvZHkiLCJoYXMiLCJjb25zdHJ1Y3RvciIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJjbGVhciIsImRpc2Nvbm5lY3RzIiwiV2Vha01hcCIsImRlZmluZUVsZW1lbnQiLCJ0YWdOYW1lIiwiaHlicmlkc09yQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJDdXN0b21FbGVtZW50Iiwid2luZG93IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJFcnJvciIsImxpc3QiLCJpbmRleCIsImxlbmd0aCIsImNiIiwiSFRNTEVsZW1lbnQiLCJkZWZpbmVNYXAiLCJlbGVtZW50cyIsInJlZHVjZSIsImFjYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7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QS9CO0FBRUEsU0FBT0EsTUFBUDtBQUNEOztBQUVELFNBQVNnRSxTQUFULENBQW1CQyxRQUFuQixFQUE2QjtBQUMzQixTQUFPN0QsTUFBTSxDQUFDQyxJQUFQLENBQVk0RCxRQUFaLEVBQXNCQyxNQUF0QixDQUE2QixVQUFDQyxHQUFELEVBQU01RCxHQUFOLEVBQWM7QUFDaEQsUUFBTTRDLE9BQU8sR0FBRyx5QkFBYTVDLEdBQWIsQ0FBaEI7QUFDQTRELElBQUFBLEdBQUcsQ0FBQzVELEdBQUQsQ0FBSCxHQUFXMkMsYUFBYSxDQUFDQyxPQUFELEVBQVVjLFFBQVEsQ0FBQzFELEdBQUQsQ0FBbEIsQ0FBeEI7QUFFQSxXQUFPNEQsR0FBUDtBQUNELEdBTE0sRUFLSixFQUxJLENBQVA7QUFNRDs7QUFFYyxTQUFTVixNQUFULEdBQXlCO0FBQ3RDLE1BQUksOERBQW1CLFFBQXZCLEVBQWlDO0FBQy9CLFdBQU9PLFNBQVMsa0RBQWhCO0FBQ0Q7O0FBRUQsU0FBT2QsYUFBYSxNQUFiLG1CQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcHJvcGVydHkgZnJvbSAnLi9wcm9wZXJ0eSc7XG5pbXBvcnQgcmVuZGVyIGZyb20gJy4vcmVuZGVyJztcblxuaW1wb3J0ICogYXMgY2FjaGUgZnJvbSAnLi9jYWNoZSc7XG5pbXBvcnQgeyBwYXNjYWxUb0Rhc2gsIGRlZmVycmVkIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG50cnkgeyBwcm9jZXNzLmVudi5OT0RFX0VOViB9IGNhdGNoKGUpIHsgdmFyIHByb2Nlc3MgPSB7IGVudjogeyBOT0RFX0VOVjogJ3Byb2R1Y3Rpb24nIH0gfTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbmNvbnN0IGRlZmF1bHRNZXRob2QgPSAoaG9zdCwgdmFsdWUpID0+IHZhbHVlO1xuXG5mdW5jdGlvbiBjb21waWxlKEh5YnJpZCwgZGVzY3JpcHRvcnMpIHtcbiAgSHlicmlkLmh5YnJpZHMgPSBkZXNjcmlwdG9ycztcbiAgSHlicmlkLmNhbGxiYWNrcyA9IFtdO1xuXG4gIE9iamVjdC5rZXlzKGRlc2NyaXB0b3JzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBkZXNjID0gZGVzY3JpcHRvcnNba2V5XTtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGRlc2M7XG5cbiAgICBsZXQgY29uZmlnO1xuXG4gICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbmZpZyA9IGtleSA9PT0gJ3JlbmRlcicgPyByZW5kZXIoZGVzYykgOiB7IGdldDogZGVzYyB9O1xuICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gJ29iamVjdCcgfHwgZGVzYyA9PT0gbnVsbCB8fCAoQXJyYXkuaXNBcnJheShkZXNjKSkpIHtcbiAgICAgIGNvbmZpZyA9IHByb3BlcnR5KGRlc2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSB7XG4gICAgICAgIGdldDogZGVzYy5nZXQgfHwgZGVmYXVsdE1ldGhvZCxcbiAgICAgICAgc2V0OiBkZXNjLnNldCB8fCAoIWRlc2MuZ2V0ICYmIGRlZmF1bHRNZXRob2QpIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgY29ubmVjdDogZGVzYy5jb25uZWN0LFxuICAgICAgICBvYnNlcnZlOiBkZXNjLm9ic2VydmUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIeWJyaWQucHJvdG90eXBlLCBrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KHRoaXMsIGtleSwgY29uZmlnLmdldCk7XG4gICAgICB9LFxuICAgICAgc2V0OiBjb25maWcuc2V0ICYmIGZ1bmN0aW9uIHNldChuZXdWYWx1ZSkge1xuICAgICAgICBjYWNoZS5zZXQodGhpcywga2V5LCBjb25maWcuc2V0LCBuZXdWYWx1ZSk7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgICB9KTtcblxuICAgIGlmIChjb25maWcuY29ubmVjdCkge1xuICAgICAgSHlicmlkLmNhbGxiYWNrcy5wdXNoKGhvc3QgPT4gY29uZmlnLmNvbm5lY3QoaG9zdCwga2V5LCAoKSA9PiB7XG4gICAgICAgIGNhY2hlLmludmFsaWRhdGUoaG9zdCwga2V5KTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLm9ic2VydmUpIHtcbiAgICAgIEh5YnJpZC5jYWxsYmFja3MucHVzaCgoaG9zdCkgPT4ge1xuICAgICAgICBsZXQgbGFzdFZhbHVlO1xuICAgICAgICByZXR1cm4gY2FjaGUub2JzZXJ2ZShob3N0LCBrZXksICgpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGhvc3Rba2V5XTtcbiAgICAgICAgICBpZiAodmFsdWUgIT09IGxhc3RWYWx1ZSkge1xuICAgICAgICAgICAgY29uZmlnLm9ic2VydmUoaG9zdCwgdmFsdWUsIGxhc3RWYWx1ZSk7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxubGV0IHVwZGF0ZTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBjb25zdCB3YWxrSW5TaGFkb3cgPSAobm9kZSwgZm4pID0+IHtcbiAgICBmbihub2RlKTtcblxuICAgIEFycmF5LmZyb20obm9kZS5jaGlsZHJlbilcbiAgICAgIC5mb3JFYWNoKGVsID0+IHdhbGtJblNoYWRvdyhlbCwgZm4pKTtcblxuICAgIGlmIChub2RlLnNoYWRvd1Jvb3QpIHtcbiAgICAgIEFycmF5LmZyb20obm9kZS5zaGFkb3dSb290LmNoaWxkcmVuKVxuICAgICAgICAuZm9yRWFjaChlbCA9PiB3YWxrSW5TaGFkb3coZWwsIGZuKSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVF1ZXVlID0gbmV3IE1hcCgpO1xuICB1cGRhdGUgPSAoSHlicmlkLCBsYXN0SHlicmlkcykgPT4ge1xuICAgIGlmICghdXBkYXRlUXVldWUuc2l6ZSkge1xuICAgICAgZGVmZXJyZWQudGhlbigoKSA9PiB7XG4gICAgICAgIHdhbGtJblNoYWRvdyhkb2N1bWVudC5ib2R5LCAobm9kZSkgPT4ge1xuICAgICAgICAgIGlmICh1cGRhdGVRdWV1ZS5oYXMobm9kZS5jb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICAgIGNvbnN0IGh5YnJpZHMgPSB1cGRhdGVRdWV1ZS5nZXQobm9kZS5jb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICBub2RlLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG5vZGUuY29uc3RydWN0b3IuaHlicmlkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgIGNhY2hlLmludmFsaWRhdGUobm9kZSwga2V5LCBub2RlW2tleV0gPT09IGh5YnJpZHNba2V5XSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbm9kZS5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHVwZGF0ZVF1ZXVlLmNsZWFyKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdXBkYXRlUXVldWUuc2V0KEh5YnJpZCwgbGFzdEh5YnJpZHMpO1xuICB9O1xufVxuXG5jb25zdCBkaXNjb25uZWN0cyA9IG5ldyBXZWFrTWFwKCk7XG5cbmZ1bmN0aW9uIGRlZmluZUVsZW1lbnQodGFnTmFtZSwgaHlicmlkc09yQ29uc3RydWN0b3IpIHtcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiBoeWJyaWRzT3JDb25zdHJ1Y3RvcjtcbiAgaWYgKHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoYFNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uOiAke3R5cGV9YCk7XG4gIH1cblxuICBjb25zdCBDdXN0b21FbGVtZW50ID0gd2luZG93LmN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKTtcblxuICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChDdXN0b21FbGVtZW50ICE9PSBoeWJyaWRzT3JDb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgaHlicmlkc09yQ29uc3RydWN0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gQ3VzdG9tRWxlbWVudDtcbiAgfVxuXG4gIGlmIChDdXN0b21FbGVtZW50KSB7XG4gICAgaWYgKEN1c3RvbUVsZW1lbnQuaHlicmlkcyA9PT0gaHlicmlkc09yQ29uc3RydWN0b3IpIHtcbiAgICAgIHJldHVybiBDdXN0b21FbGVtZW50O1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBDdXN0b21FbGVtZW50Lmh5YnJpZHMpIHtcbiAgICAgIE9iamVjdC5rZXlzKEN1c3RvbUVsZW1lbnQuaHlicmlkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGRlbGV0ZSBDdXN0b21FbGVtZW50LnByb3RvdHlwZVtrZXldO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGxhc3RIeWJyaWRzID0gQ3VzdG9tRWxlbWVudC5oeWJyaWRzO1xuXG4gICAgICBjb21waWxlKEN1c3RvbUVsZW1lbnQsIGh5YnJpZHNPckNvbnN0cnVjdG9yKTtcbiAgICAgIHVwZGF0ZShDdXN0b21FbGVtZW50LCBsYXN0SHlicmlkcyk7XG5cbiAgICAgIHJldHVybiBDdXN0b21FbGVtZW50O1xuICAgIH1cblxuICAgIHRocm93IEVycm9yKGBFbGVtZW50ICcke3RhZ05hbWV9JyBhbHJlYWR5IGRlZmluZWRgKTtcbiAgfVxuXG4gIGNsYXNzIEh5YnJpZCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBzdGF0aWMgZ2V0IG5hbWUoKSB7IHJldHVybiB0YWdOYW1lOyB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIGNvbnN0IHsgY2FsbGJhY2tzIH0gPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgY29uc3QgbGlzdCA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY2FsbGJhY2tzLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICBjb25zdCBjYiA9IGNhbGxiYWNrc1tpbmRleF0odGhpcyk7XG4gICAgICAgIGlmIChjYikgbGlzdC5wdXNoKGNiKTtcbiAgICAgIH1cblxuICAgICAgZGlzY29ubmVjdHMuc2V0KHRoaXMsIGxpc3QpO1xuICAgIH1cblxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgY29uc3QgbGlzdCA9IGRpc2Nvbm5lY3RzLmdldCh0aGlzKTtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsaXN0Lmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICBsaXN0W2luZGV4XSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbXBpbGUoSHlicmlkLCBoeWJyaWRzT3JDb25zdHJ1Y3Rvcik7XG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBIeWJyaWQpO1xuXG4gIHJldHVybiBIeWJyaWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmluZU1hcChlbGVtZW50cykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZWxlbWVudHMpLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YWdOYW1lID0gcGFzY2FsVG9EYXNoKGtleSk7XG4gICAgYWNjW2tleV0gPSBkZWZpbmVFbGVtZW50KHRhZ05hbWUsIGVsZW1lbnRzW2tleV0pO1xuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZpbmUoLi4uYXJncykge1xuICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGRlZmluZU1hcChhcmdzWzBdKTtcbiAgfVxuXG4gIHJldHVybiBkZWZpbmVFbGVtZW50KC4uLmFyZ3MpO1xufVxuIl19