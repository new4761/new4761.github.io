"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function render(_get) {
  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof _get !== 'function') {
    throw TypeError("The first argument must be a function: ".concat(_typeof(_get)));
  }

  var options = _objectSpread({
    shadowRoot: true
  }, customOptions);

  var shadowRootInit = {
    mode: 'open'
  };

  if (_typeof(options.shadowRoot) === 'object') {
    Object.assign(shadowRootInit, options.shadowRoot);
  }

  return {
    get: function get(host) {
      var fn = _get(host);

      return function flush() {
        fn(host, options.shadowRoot ? host.shadowRoot : host);
      };
    },
    connect: function connect(host) {
      if (options.shadowRoot && !host.shadowRoot) {
        host.attachShadow(shadowRootInit);
      }
    },
    observe: function observe(host, fn) {
      fn();
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXIuanMiXSwibmFtZXMiOlsicmVuZGVyIiwiZ2V0IiwiY3VzdG9tT3B0aW9ucyIsIlR5cGVFcnJvciIsIm9wdGlvbnMiLCJzaGFkb3dSb290Iiwic2hhZG93Um9vdEluaXQiLCJtb2RlIiwiT2JqZWN0IiwiYXNzaWduIiwiaG9zdCIsImZuIiwiZmx1c2giLCJjb25uZWN0IiwiYXR0YWNoU2hhZG93Iiwib2JzZXJ2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFlLFNBQVNBLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXlDO0FBQUEsTUFBcEJDLGFBQW9CLHVFQUFKLEVBQUk7O0FBQ3RELE1BQUksT0FBT0QsSUFBUCxLQUFlLFVBQW5CLEVBQStCO0FBQzdCLFVBQU1FLFNBQVMsMERBQWtERixJQUFsRCxHQUFmO0FBQ0Q7O0FBRUQsTUFBTUcsT0FBTztBQUFLQyxJQUFBQSxVQUFVLEVBQUU7QUFBakIsS0FBMEJILGFBQTFCLENBQWI7O0FBQ0EsTUFBTUksY0FBYyxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFSLEdBQXZCOztBQUVBLE1BQUksUUFBT0gsT0FBTyxDQUFDQyxVQUFmLE1BQThCLFFBQWxDLEVBQTRDO0FBQzFDRyxJQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY0gsY0FBZCxFQUE4QkYsT0FBTyxDQUFDQyxVQUF0QztBQUNEOztBQUVELFNBQU87QUFDTEosSUFBQUEsR0FESyxlQUNEUyxJQURDLEVBQ0s7QUFDUixVQUFNQyxFQUFFLEdBQUdWLElBQUcsQ0FBQ1MsSUFBRCxDQUFkOztBQUNBLGFBQU8sU0FBU0UsS0FBVCxHQUFpQjtBQUN0QkQsUUFBQUEsRUFBRSxDQUFDRCxJQUFELEVBQU9OLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQkssSUFBSSxDQUFDTCxVQUExQixHQUF1Q0ssSUFBOUMsQ0FBRjtBQUNELE9BRkQ7QUFHRCxLQU5JO0FBT0xHLElBQUFBLE9BUEssbUJBT0dILElBUEgsRUFPUztBQUNaLFVBQUlOLE9BQU8sQ0FBQ0MsVUFBUixJQUFzQixDQUFDSyxJQUFJLENBQUNMLFVBQWhDLEVBQTRDO0FBQzFDSyxRQUFBQSxJQUFJLENBQUNJLFlBQUwsQ0FBa0JSLGNBQWxCO0FBQ0Q7QUFDRixLQVhJO0FBWUxTLElBQUFBLE9BWkssbUJBWUdMLElBWkgsRUFZU0MsRUFaVCxFQVlhO0FBQ2hCQSxNQUFBQSxFQUFFO0FBQ0g7QUFkSSxHQUFQO0FBZ0JEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKGdldCwgY3VzdG9tT3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2YgZ2V0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKGBUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uOiAke3R5cGVvZiBnZXR9YCk7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0geyBzaGFkb3dSb290OiB0cnVlLCAuLi5jdXN0b21PcHRpb25zIH07XG4gIGNvbnN0IHNoYWRvd1Jvb3RJbml0ID0geyBtb2RlOiAnb3BlbicgfTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuc2hhZG93Um9vdCA9PT0gJ29iamVjdCcpIHtcbiAgICBPYmplY3QuYXNzaWduKHNoYWRvd1Jvb3RJbml0LCBvcHRpb25zLnNoYWRvd1Jvb3QpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXQoaG9zdCkge1xuICAgICAgY29uc3QgZm4gPSBnZXQoaG9zdCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIGZuKGhvc3QsIG9wdGlvbnMuc2hhZG93Um9vdCA/IGhvc3Quc2hhZG93Um9vdCA6IGhvc3QpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbm5lY3QoaG9zdCkge1xuICAgICAgaWYgKG9wdGlvbnMuc2hhZG93Um9vdCAmJiAhaG9zdC5zaGFkb3dSb290KSB7XG4gICAgICAgIGhvc3QuYXR0YWNoU2hhZG93KHNoYWRvd1Jvb3RJbml0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9ic2VydmUoaG9zdCwgZm4pIHtcbiAgICAgIGZuKCk7XG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==