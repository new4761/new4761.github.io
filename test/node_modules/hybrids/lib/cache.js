"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEntry = getEntry;
exports.get = get;
exports.set = set;
exports.invalidate = invalidate;
exports.observe = observe;

var _utils = require("./utils");

var emitter = _interopRequireWildcard(require("./emitter"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var entries = new WeakMap();

function getEntry(target, key) {
  var targetMap = entries.get(target);

  if (!targetMap) {
    targetMap = new Map();
    entries.set(target, targetMap);
  }

  var entry = targetMap.get(key);

  if (!entry) {
    entry = {
      target: target,
      key: key,
      value: undefined,
      contexts: undefined,
      deps: undefined,
      state: 1,
      checksum: 0,
      observed: false
    };
    targetMap.set(key, entry);
  }

  return entry;
}

function calculateChecksum(entry) {
  var checksum = entry.state;

  if (entry.deps) {
    entry.deps.forEach(function (depEntry) {
      // eslint-disable-next-line no-unused-expressions
      depEntry.target[depEntry.key];
      checksum += depEntry.state;
    });
  }

  return checksum;
}

function dispatchDeep(entry) {
  if (entry.observed) emitter.dispatch(entry);
  if (entry.contexts) entry.contexts.forEach(dispatchDeep);
}

var context = null;

function get(target, key, getter) {
  var entry = getEntry(target, key);

  if (context === entry) {
    context = null;
    throw Error("Circular '".concat(key, "' get invocation in '").concat((0, _utils.stringifyElement)(target), "'"));
  }

  if (context) {
    context.deps = context.deps || new Set();
    context.deps.add(entry);
  }

  if (context && (context.observed || context.contexts && context.contexts.size)) {
    entry.contexts = entry.contexts || new Set();
    entry.contexts.add(context);
  }

  var parentContext = context;
  context = entry;

  if (entry.checksum && entry.checksum === calculateChecksum(entry)) {
    context = parentContext;
    return entry.value;
  }

  if (entry.deps && entry.deps.size) {
    entry.deps.forEach(function (depEntry) {
      if (depEntry.contexts) depEntry.contexts.delete(entry);
    });
    entry.deps = undefined;
  }

  try {
    var nextValue = getter(target, entry.value);

    if (nextValue !== entry.value) {
      entry.state += 1;
      entry.value = nextValue;
      dispatchDeep(entry);
    }

    entry.checksum = calculateChecksum(entry);
    context = parentContext;
  } catch (e) {
    context = null;
    throw e;
  }

  return entry.value;
}

function set(target, key, setter, value) {
  if (context) {
    context = null;
    throw Error("Try to set '".concat(key, "' of '").concat((0, _utils.stringifyElement)(target), "' in get call"));
  }

  var entry = getEntry(target, key);
  var newValue = setter(target, value, entry.value);

  if (newValue !== entry.value) {
    entry.state += 1;
    entry.value = newValue;
    dispatchDeep(entry);
  }
}

function invalidate(target, key, clearValue) {
  if (context) {
    context = null;
    throw Error("Try to invalidate '".concat(key, "' in '").concat((0, _utils.stringifyElement)(target), "' get call"));
  }

  var entry = getEntry(target, key);
  entry.checksum = 0;
  dispatchDeep(entry);

  if (clearValue) {
    entry.value = undefined;
  }
}

function observe(target, key, fn) {
  var entry = getEntry(target, key);
  entry.observed = true;
  return emitter.subscribe(entry, fn);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,