function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

export default function render(_get) {
  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof _get !== 'function') {
    throw TypeError("The first argument must be a function: ".concat(_typeof(_get)));
  }

  var options = _objectSpread({
    shadowRoot: true
  }, customOptions);

  var shadowRootInit = {
    mode: 'open'
  };

  if (_typeof(options.shadowRoot) === 'object') {
    Object.assign(shadowRootInit, options.shadowRoot);
  }

  return {
    get: function get(host) {
      var fn = _get(host);

      return function flush() {
        fn(host, options.shadowRoot ? host.shadowRoot : host);
      };
    },
    connect: function connect(host) {
      if (options.shadowRoot && !host.shadowRoot) {
        host.attachShadow(shadowRootInit);
      }
    },
    observe: function observe(host, fn) {
      fn();
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXIuanMiXSwibmFtZXMiOlsicmVuZGVyIiwiZ2V0IiwiY3VzdG9tT3B0aW9ucyIsIlR5cGVFcnJvciIsIm9wdGlvbnMiLCJzaGFkb3dSb290Iiwic2hhZG93Um9vdEluaXQiLCJtb2RlIiwiT2JqZWN0IiwiYXNzaWduIiwiaG9zdCIsImZuIiwiZmx1c2giLCJjb25uZWN0IiwiYXR0YWNoU2hhZG93Iiwib2JzZXJ2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZUFBZSxTQUFTQSxNQUFULENBQWdCQyxJQUFoQixFQUF5QztBQUFBLE1BQXBCQyxhQUFvQix1RUFBSixFQUFJOztBQUN0RCxNQUFJLE9BQU9ELElBQVAsS0FBZSxVQUFuQixFQUErQjtBQUM3QixVQUFNRSxTQUFTLDBEQUFrREYsSUFBbEQsR0FBZjtBQUNEOztBQUVELE1BQU1HLE9BQU87QUFBS0MsSUFBQUEsVUFBVSxFQUFFO0FBQWpCLEtBQTBCSCxhQUExQixDQUFiOztBQUNBLE1BQU1JLGNBQWMsR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQUF2Qjs7QUFFQSxNQUFJLFFBQU9ILE9BQU8sQ0FBQ0MsVUFBZixNQUE4QixRQUFsQyxFQUE0QztBQUMxQ0csSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNILGNBQWQsRUFBOEJGLE9BQU8sQ0FBQ0MsVUFBdEM7QUFDRDs7QUFFRCxTQUFPO0FBQ0xKLElBQUFBLEdBREssZUFDRFMsSUFEQyxFQUNLO0FBQ1IsVUFBTUMsRUFBRSxHQUFHVixJQUFHLENBQUNTLElBQUQsQ0FBZDs7QUFDQSxhQUFPLFNBQVNFLEtBQVQsR0FBaUI7QUFDdEJELFFBQUFBLEVBQUUsQ0FBQ0QsSUFBRCxFQUFPTixPQUFPLENBQUNDLFVBQVIsR0FBcUJLLElBQUksQ0FBQ0wsVUFBMUIsR0FBdUNLLElBQTlDLENBQUY7QUFDRCxPQUZEO0FBR0QsS0FOSTtBQU9MRyxJQUFBQSxPQVBLLG1CQU9HSCxJQVBILEVBT1M7QUFDWixVQUFJTixPQUFPLENBQUNDLFVBQVIsSUFBc0IsQ0FBQ0ssSUFBSSxDQUFDTCxVQUFoQyxFQUE0QztBQUMxQ0ssUUFBQUEsSUFBSSxDQUFDSSxZQUFMLENBQWtCUixjQUFsQjtBQUNEO0FBQ0YsS0FYSTtBQVlMUyxJQUFBQSxPQVpLLG1CQVlHTCxJQVpILEVBWVNDLEVBWlQsRUFZYTtBQUNoQkEsTUFBQUEsRUFBRTtBQUNIO0FBZEksR0FBUDtBQWdCRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihnZXQsIGN1c3RvbU9wdGlvbnMgPSB7fSkge1xuICBpZiAodHlwZW9mIGdldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihgVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbjogJHt0eXBlb2YgZ2V0fWApO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHsgc2hhZG93Um9vdDogdHJ1ZSwgLi4uY3VzdG9tT3B0aW9ucyB9O1xuICBjb25zdCBzaGFkb3dSb290SW5pdCA9IHsgbW9kZTogJ29wZW4nIH07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLnNoYWRvd1Jvb3QgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzaGFkb3dSb290SW5pdCwgb3B0aW9ucy5zaGFkb3dSb290KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0KGhvc3QpIHtcbiAgICAgIGNvbnN0IGZuID0gZ2V0KGhvc3QpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICBmbihob3N0LCBvcHRpb25zLnNoYWRvd1Jvb3QgPyBob3N0LnNoYWRvd1Jvb3QgOiBob3N0KTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBjb25uZWN0KGhvc3QpIHtcbiAgICAgIGlmIChvcHRpb25zLnNoYWRvd1Jvb3QgJiYgIWhvc3Quc2hhZG93Um9vdCkge1xuICAgICAgICBob3N0LmF0dGFjaFNoYWRvdyhzaGFkb3dSb290SW5pdCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvYnNlcnZlKGhvc3QsIGZuKSB7XG4gICAgICBmbigpO1xuICAgIH0sXG4gIH07XG59XG4iXX0=