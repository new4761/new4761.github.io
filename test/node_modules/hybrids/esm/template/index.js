import defineElements from '../define';
import { compileTemplate, getPlaceholder } from './core';
import * as helpers from './helpers';
var PLACEHOLDER = getPlaceholder();
var SVG_PLACEHOLDER = getPlaceholder('svg');
var templatesMap = new Map();
var stylesMap = new WeakMap();
var methods = {
  define: function define(elements) {
    defineElements(elements);
    return this;
  },
  key: function key(id) {
    this.id = id;
    return this;
  },
  style: function style() {
    for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
      styles[_key] = arguments[_key];
    }

    stylesMap.set(this, styles);
    return this;
  }
};

function create(parts, args, isSVG) {
  var createTemplate = function createTemplate(host) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : host;
    var styles = stylesMap.get(createTemplate);
    var id = parts.join(PLACEHOLDER);
    if (styles) id += styles.join(PLACEHOLDER);
    if (isSVG) id += SVG_PLACEHOLDER;
    var render = templatesMap.get(id);

    if (!render) {
      render = compileTemplate(parts, isSVG, styles);
      templatesMap.set(id, render);
    }

    render(host, target, args);
  };

  return Object.assign(createTemplate, methods);
}

export function html(parts) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return create(parts, args);
}
export function svg(parts) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return create(parts, args, true);
}
Object.assign(html, helpers);
Object.assign(svg, helpers);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZpbmVFbGVtZW50cyIsImNvbXBpbGVUZW1wbGF0ZSIsImdldFBsYWNlaG9sZGVyIiwiaGVscGVycyIsIlBMQUNFSE9MREVSIiwiU1ZHX1BMQUNFSE9MREVSIiwidGVtcGxhdGVzTWFwIiwiTWFwIiwic3R5bGVzTWFwIiwiV2Vha01hcCIsIm1ldGhvZHMiLCJkZWZpbmUiLCJlbGVtZW50cyIsImtleSIsImlkIiwic3R5bGUiLCJzdHlsZXMiLCJzZXQiLCJjcmVhdGUiLCJwYXJ0cyIsImFyZ3MiLCJpc1NWRyIsImNyZWF0ZVRlbXBsYXRlIiwiaG9zdCIsInRhcmdldCIsImdldCIsImpvaW4iLCJyZW5kZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJodG1sIiwic3ZnIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxjQUFQLE1BQTJCLFdBQTNCO0FBRUEsU0FBU0MsZUFBVCxFQUEwQkMsY0FBMUIsUUFBZ0QsUUFBaEQ7QUFDQSxPQUFPLEtBQUtDLE9BQVosTUFBeUIsV0FBekI7QUFFQSxJQUFNQyxXQUFXLEdBQUdGLGNBQWMsRUFBbEM7QUFDQSxJQUFNRyxlQUFlLEdBQUdILGNBQWMsQ0FBQyxLQUFELENBQXRDO0FBRUEsSUFBTUksWUFBWSxHQUFHLElBQUlDLEdBQUosRUFBckI7QUFDQSxJQUFNQyxTQUFTLEdBQUcsSUFBSUMsT0FBSixFQUFsQjtBQUVBLElBQU1DLE9BQU8sR0FBRztBQUNkQyxFQUFBQSxNQURjLGtCQUNQQyxRQURPLEVBQ0c7QUFDZlosSUFBQUEsY0FBYyxDQUFDWSxRQUFELENBQWQ7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUphO0FBS2RDLEVBQUFBLEdBTGMsZUFLVkMsRUFMVSxFQUtOO0FBQ04sU0FBS0EsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FSYTtBQVNkQyxFQUFBQSxLQVRjLG1CQVNHO0FBQUEsc0NBQVJDLE1BQVE7QUFBUkEsTUFBQUEsTUFBUTtBQUFBOztBQUNmUixJQUFBQSxTQUFTLENBQUNTLEdBQVYsQ0FBYyxJQUFkLEVBQW9CRCxNQUFwQjtBQUNBLFdBQU8sSUFBUDtBQUNEO0FBWmEsQ0FBaEI7O0FBZUEsU0FBU0UsTUFBVCxDQUFnQkMsS0FBaEIsRUFBdUJDLElBQXZCLEVBQTZCQyxLQUE3QixFQUFvQztBQUNsQyxNQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUNDLElBQUQsRUFBeUI7QUFBQSxRQUFsQkMsTUFBa0IsdUVBQVRELElBQVM7QUFDOUMsUUFBTVAsTUFBTSxHQUFHUixTQUFTLENBQUNpQixHQUFWLENBQWNILGNBQWQsQ0FBZjtBQUNBLFFBQUlSLEVBQUUsR0FBR0ssS0FBSyxDQUFDTyxJQUFOLENBQVd0QixXQUFYLENBQVQ7QUFDQSxRQUFJWSxNQUFKLEVBQVlGLEVBQUUsSUFBSUUsTUFBTSxDQUFDVSxJQUFQLENBQVl0QixXQUFaLENBQU47QUFDWixRQUFJaUIsS0FBSixFQUFXUCxFQUFFLElBQUlULGVBQU47QUFFWCxRQUFJc0IsTUFBTSxHQUFHckIsWUFBWSxDQUFDbUIsR0FBYixDQUFpQlgsRUFBakIsQ0FBYjs7QUFDQSxRQUFJLENBQUNhLE1BQUwsRUFBYTtBQUNYQSxNQUFBQSxNQUFNLEdBQUcxQixlQUFlLENBQUNrQixLQUFELEVBQVFFLEtBQVIsRUFBZUwsTUFBZixDQUF4QjtBQUNBVixNQUFBQSxZQUFZLENBQUNXLEdBQWIsQ0FBaUJILEVBQWpCLEVBQXFCYSxNQUFyQjtBQUNEOztBQUVEQSxJQUFBQSxNQUFNLENBQUNKLElBQUQsRUFBT0MsTUFBUCxFQUFlSixJQUFmLENBQU47QUFDRCxHQWJEOztBQWVBLFNBQU9RLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUCxjQUFkLEVBQThCWixPQUE5QixDQUFQO0FBQ0Q7O0FBRUQsT0FBTyxTQUFTb0IsSUFBVCxDQUFjWCxLQUFkLEVBQThCO0FBQUEscUNBQU5DLElBQU07QUFBTkEsSUFBQUEsSUFBTTtBQUFBOztBQUNuQyxTQUFPRixNQUFNLENBQUNDLEtBQUQsRUFBUUMsSUFBUixDQUFiO0FBQ0Q7QUFFRCxPQUFPLFNBQVNXLEdBQVQsQ0FBYVosS0FBYixFQUE2QjtBQUFBLHFDQUFOQyxJQUFNO0FBQU5BLElBQUFBLElBQU07QUFBQTs7QUFDbEMsU0FBT0YsTUFBTSxDQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBYyxJQUFkLENBQWI7QUFDRDtBQUVEUSxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBZCxFQUFvQjNCLE9BQXBCO0FBQ0F5QixNQUFNLENBQUNDLE1BQVAsQ0FBY0UsR0FBZCxFQUFtQjVCLE9BQW5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZUVsZW1lbnRzIGZyb20gJy4uL2RlZmluZSc7XG5cbmltcG9ydCB7IGNvbXBpbGVUZW1wbGF0ZSwgZ2V0UGxhY2Vob2xkZXIgfSBmcm9tICcuL2NvcmUnO1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBQTEFDRUhPTERFUiA9IGdldFBsYWNlaG9sZGVyKCk7XG5jb25zdCBTVkdfUExBQ0VIT0xERVIgPSBnZXRQbGFjZWhvbGRlcignc3ZnJyk7XG5cbmNvbnN0IHRlbXBsYXRlc01hcCA9IG5ldyBNYXAoKTtcbmNvbnN0IHN0eWxlc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbmNvbnN0IG1ldGhvZHMgPSB7XG4gIGRlZmluZShlbGVtZW50cykge1xuICAgIGRlZmluZUVsZW1lbnRzKGVsZW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAga2V5KGlkKSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBzdHlsZSguLi5zdHlsZXMpIHtcbiAgICBzdHlsZXNNYXAuc2V0KHRoaXMsIHN0eWxlcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBjcmVhdGUocGFydHMsIGFyZ3MsIGlzU1ZHKSB7XG4gIGNvbnN0IGNyZWF0ZVRlbXBsYXRlID0gKGhvc3QsIHRhcmdldCA9IGhvc3QpID0+IHtcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZXNNYXAuZ2V0KGNyZWF0ZVRlbXBsYXRlKTtcbiAgICBsZXQgaWQgPSBwYXJ0cy5qb2luKFBMQUNFSE9MREVSKTtcbiAgICBpZiAoc3R5bGVzKSBpZCArPSBzdHlsZXMuam9pbihQTEFDRUhPTERFUik7XG4gICAgaWYgKGlzU1ZHKSBpZCArPSBTVkdfUExBQ0VIT0xERVI7XG5cbiAgICBsZXQgcmVuZGVyID0gdGVtcGxhdGVzTWFwLmdldChpZCk7XG4gICAgaWYgKCFyZW5kZXIpIHtcbiAgICAgIHJlbmRlciA9IGNvbXBpbGVUZW1wbGF0ZShwYXJ0cywgaXNTVkcsIHN0eWxlcyk7XG4gICAgICB0ZW1wbGF0ZXNNYXAuc2V0KGlkLCByZW5kZXIpO1xuICAgIH1cblxuICAgIHJlbmRlcihob3N0LCB0YXJnZXQsIGFyZ3MpO1xuICB9O1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKGNyZWF0ZVRlbXBsYXRlLCBtZXRob2RzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh0bWwocGFydHMsIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGNyZWF0ZShwYXJ0cywgYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdmcocGFydHMsIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGNyZWF0ZShwYXJ0cywgYXJncywgdHJ1ZSk7XG59XG5cbk9iamVjdC5hc3NpZ24oaHRtbCwgaGVscGVycyk7XG5PYmplY3QuYXNzaWduKHN2ZywgaGVscGVycyk7XG4iXX0=